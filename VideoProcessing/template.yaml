AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  VideoProcessing

  Sample SAM Template for VideoProcessing

Parameters:
  GraphLoadStagingBucket:
    Type: String
  GraphLoadQueue:
    Type: String

Resources:

  GraphLoadProcessingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
#      BucketName: !Sub "graph-load-processing-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processing.asl.json
      DefinitionSubstitutions:
        StartRekognitionJobFunctionArn: !GetAtt StartRekognitionJobFunction.Arn
        CheckRekognitionResultsFunctionArn: !GetAtt CheckRekognitionResultsFunction.Arn
        CreateGraphLoadFilesFunctionArn: !GetAtt CreateGraphLoadFilesFunction.Arn
#        LoadToGraphFunctionArn: !GetAtt LoadToGraphFunction.Arn
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StartRekognitionJobFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckRekognitionResultsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateGraphLoadFilesFunction

  VideoProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
#      QueueName: !Sub "video-processing-dead-letter-queue-${AWS::AccountId}-${AWS::Region}-${AWS::StackName}"
      SqsManagedSseEnabled: true

  StartRekognitionJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/start_label_detection/
      Handler: app.lambda_handler
      Runtime: python3.9
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      Timeout: 15
      Architectures:
        - x86_64
      Environment:
        Variables:
          SNS_ROLE: !GetAtt RekognitionRole.Arn
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonSQSFullAccess

  CheckRekognitionResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_rek_results/
      Handler: app.lambda_handler
      Runtime: python3.9
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      Timeout: 60
      Architectures:
        - x86_64
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
      Environment:
        Variables:
          GRAPH_LOAD_PROCESSING_BUCKET: !Ref GraphLoadProcessingBucket

  CreateGraphLoadFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_graph_load_files/
      Handler: app.lambda_handler
      Runtime: python3.9
      ReservedConcurrentExecutions: 1
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      Timeout: 600
      Architectures:
        - x86_64
      Policies:
        - AmazonS3FullAccess
        - SQSSendMessagePolicy:
            QueueName: !Ref GraphLoadQueue
        - AmazonSQSFullAccess
      Environment:
        Variables:
          GRAPH_LOAD_STAGING_BUCKET: !Ref GraphLoadStagingBucket
          GRAPH_LOAD_PROCESSING_BUCKET: !Ref GraphLoadProcessingBucket
          GRAPH_LOAD_QUEUE: !Ref GraphLoadQueue

#  QueueForGraphLoadFunction:
#    Type: AWS::Serverless::Function
#    Properties:
#      CodeUri: functions/load_to_graph/
#      Handler: app.lambda_handler
#      Runtime: python3.9
#      Timeout: 60
#      ReservedConcurrentExecutions: 1
#      DeadLetterQueue:
#        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
#        Type: SQS
#      Architectures:
#        - x86_64
#      Environment:
#        Variables:
#          GRAPH_LOAD_PROCESSING_BUCKET: !Ref GraphLoadProcessingBucket

  RekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "video_processing_topic_role_${AWS::Region}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument: 
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "rekognition.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {}
                }
            ]
        }

#  GraphLoadStagingBucket:
#    Type: AWS::S3::Bucket
#    Properties:
#      BucketEncryption:
#        ServerSideEncryptionConfiguration:
#          - ServerSideEncryptionByDefault:
#              SSEAlgorithm: AES256
#      BucketName: !Sub "graph-load-staging-${AWS::AccountId}-${AWS::Region}"
#      PublicAccessBlockConfiguration:
#        BlockPublicAcls: True
#        BlockPublicPolicy: True
#        IgnorePublicAcls: True
#        RestrictPublicBuckets: True
#      VersioningConfiguration:
#        Status: Enabled

Outputs:
  VideoProcessingStateMachineArn:
    Description: "ETL State machine ARN"
    Value: !Ref VideoProcessingStateMachine
