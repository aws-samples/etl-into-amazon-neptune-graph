AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  VideoProcessing

  Sample SAM Template for VideoProcessing

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  NeptuneLoadFromS3IAMRoleArn:
    Type: String
  NeptuneEndpoint: # todo: purge, not using
    Type: String
  NeptuneLoaderEndpoint:
    Type: String
  NeptunePort: # todo: purge, not using
    Type: String
  NeptuneSubnet:
    Type: String
  NeptuneSecurityGroup:
    Type: String

Resources:
  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processing.asl.json
      DefinitionSubstitutions:
        StartRekognitionJobFunctionArn: !GetAtt StartRekognitionJobFunction.Arn
        CheckRekognitionResultsFunctionArn: !GetAtt CheckRekognitionResultsFunction.Arn
        CreateGraphLoadFilesFunctionArn: !GetAtt CreateGraphLoadFilesFunction.Arn
        LoadToGraphFunctionArn: !GetAtt LoadToGraphFunction.Arn
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StartRekognitionJobFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckRekognitionResultsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateGraphLoadFilesFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref LoadToGraphFunction

  VideoMasterKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT

  VideoProcessingVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/22

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VideoProcessingVpc

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.1.0/24
      VpcId: !Ref VideoProcessingVpc

  VideoProcessingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: String
      GroupName: !Sub "VideoProcessingSecurityGroup-${AWS::Region}"
      VpcId: !Ref VideoProcessingVpc

  VideoProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref VideoMasterKmsKey
      QueueName: !Sub "video-processing-dead-letter-queue-${AWS::AccountId}-${AWS::Region}"

  StartRekognitionJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/start_label_detection/
      Handler: app.lambda_handler
      Runtime: python3.9
      KmsKeyArn: !GetAtt VideoMasterKmsKey.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      Timeout: 15
      Architectures:
        - x86_64
      Environment:
        Variables:
          SNS_ROLE: !GetAtt RekognitionRole.Arn
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonSQSFullAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VideoProcessingSecurityGroup.GroupId
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2

  CheckRekognitionResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_rek_results/
      Handler: app.lambda_handler
      Runtime: python3.9
      KmsKeyArn: !GetAtt VideoMasterKmsKey.Arn
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      Timeout: 60
      Architectures:
        - x86_64
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VideoProcessingSecurityGroup.GroupId
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2

  CreateGraphLoadFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_graph_load_files/
      Handler: app.lambda_handler
      Runtime: python3.9
      KmsKeyArn: !GetAtt VideoMasterKmsKey.Arn
      ReservedConcurrentExecutions: 1
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      Timeout: 600
      Architectures:
        - x86_64
      Policies:
        - AmazonS3FullAccess
      Environment:
        Variables:
          GRAPH_LOAD_STAGING_BUCKET: !Ref GraphLoadStagingBucket
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt VideoProcessingSecurityGroup.GroupId
        SubnetIds:
          - !Ref Subnet1
          - !Ref Subnet2

  LoadToGraphFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/load_to_graph/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      KmsKeyArn: !GetAtt VideoMasterKmsKey.Arn
      ReservedConcurrentExecutions: 1
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      Architectures:
        - x86_64
      Environment:
        Variables:
          NEPTUNE_LOADER_ENDPOINT: !Ref NeptuneLoaderEndpoint
          NEPTUNE_LOAD_ROLE_ARN: !Ref NeptuneLoadFromS3IAMRoleArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref NeptuneSecurityGroup
        SubnetIds:
          - !Ref NeptuneSubnet

  RekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "video_processing_topic_role_${AWS::Region}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument: 
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "rekognition.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {}
                }
            ]
        }

  GraphLoadStagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "graph-load-staging-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

Outputs:
  VideoProcessingStateMachineArn:
    Description: "ETL State machine ARN"
    Value: !Ref VideoProcessingStateMachine
