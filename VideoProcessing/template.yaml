AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  VideoProcessing

  Sample SAM Template for VideoProcessing

Parameters:
  GraphLoadStagingBucket:
    Type: String

  GraphLoadQueue:
    Type: String

  LoggingBucketName:
    Type: String

  VPC:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

  PowertoolsLayer:
    Type: String

  MasterKey:
    Type: String

  VPCCidrBlock:
    Type: String

  EndpointsSecurityGroup:
    Type: String

Mappings:
  PrefixListMap:
    us-east-1:
      "S3PrefixListId": "pl-63a5400a"
    us-west-1:
      "S3PrefixListId": "pl-6ba54002"
    us-west-2:
      "S3PrefixListId": "pl-68a54001"
    us-east-2:
      "S3PrefixListId": "pl-7ba54012"

Resources:

  GraphLoadProcessingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucketName
        LogFilePrefix: GraphETL/Video/Processing

  GraphLoadBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GraphLoadProcessingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Deny
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref GraphLoadProcessingBucket
                - /*
            Principal: '*'
            Condition:
              StringNotEquals:
                'aws:PrincipalAccount': !Ref AWS::AccountId

  VideoProcessingStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processing.asl.json
      DefinitionSubstitutions:
        StartRekognitionJobFunctionArn: !GetAtt StartRekognitionJobFunction.Arn
        CheckRekognitionResultsFunctionArn: !GetAtt CheckRekognitionResultsFunction.Arn
        CreateGraphLoadFilesFunctionArn: !GetAtt CreateGraphLoadFilesFunction.Arn
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StartRekognitionJobFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckRekognitionResultsFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CreateGraphLoadFilesFunction

  VideoProcessingDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref MasterKey

  ProcessingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the processing handler function
      GroupName: ProcessingSecurityGroup
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: "-1"
          CidrIp: !Ref VPCCidrBlock
        - Description: Allow traffic to service endpoints
          IpProtocol: "-1"
          DestinationPrefixListId: !FindInMap [PrefixListMap, !Ref "AWS::Region", S3PrefixListId]
      VpcId: !Ref VPC

  StartRekognitionJobFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-function.html
    Properties:
      CodeUri: functions/start_label_detection/
      Handler: app.lambda_handler
      Runtime: python3.9
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      KmsKeyArn: !Ref MasterKey
      Timeout: 15
      Architectures:
        - x86_64
      Environment:
        Variables:
          SNS_ROLE: !GetAtt RekognitionRole.Arn
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonSQSFullAccess
      VpcConfig:
        SecurityGroupIds:
          - !Ref ProcessingSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - !Ref PowertoolsLayer

  CheckRekognitionResultsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_rek_results/
      Handler: app.lambda_handler
      Runtime: python3.9
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      ReservedConcurrentExecutions: 1
      KmsKeyArn: !Ref MasterKey
      Timeout: 15
      Architectures:
        - x86_64
      Policies:
        - AmazonS3FullAccess
        - AmazonRekognitionFullAccess
        - AmazonSQSFullAccess
      Environment:
        Variables:
          GRAPH_LOAD_PROCESSING_BUCKET: !Ref GraphLoadProcessingBucket
      VpcConfig:
        SecurityGroupIds:
          - !Ref ProcessingSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - !Ref PowertoolsLayer

  CreateGraphLoadFilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/create_graph_load_files/
      Handler: app.lambda_handler
      Runtime: python3.9
      ReservedConcurrentExecutions: 1
      KmsKeyArn: !Ref MasterKey
      DeadLetterQueue:
        TargetArn: !GetAtt VideoProcessingDeadLetterQueue.Arn
        Type: SQS
      Timeout: 600
      Architectures:
        - x86_64
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref GraphLoadProcessingBucket
        - S3WritePolicy:
            BucketName: !Ref GraphLoadStagingBucket
        - SQSSendMessagePolicy:
            QueueName: !Ref GraphLoadQueue
        - AmazonSQSFullAccess
        - Statement:
            Effect: Allow
            Action: "kms:*"
            Resource: !Ref MasterKey
      Environment:
        Variables:
          GRAPH_LOAD_STAGING_BUCKET: !Ref GraphLoadStagingBucket
          GRAPH_LOAD_PROCESSING_BUCKET: !Ref GraphLoadProcessingBucket
          GRAPH_LOAD_QUEUE: !Ref GraphLoadQueue
          AWS_ACCOUNT_ID: !Ref AWS::AccountId
      VpcConfig:
        SecurityGroupIds:
          - !Ref ProcessingSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Layers:
        - !Ref PowertoolsLayer

  RekognitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "video_processing_topic_role_${AWS::Region}"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      AssumeRolePolicyDocument: 
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Principal": {
                        "Service": "rekognition.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole",
                    "Condition": {}
                }
            ]
        }

Outputs:
  VideoProcessingStateMachineArn:
    Description: "ETL State machine ARN"
    Value: !Ref VideoProcessingStateMachine
