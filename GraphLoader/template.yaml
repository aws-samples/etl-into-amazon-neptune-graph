AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  GraphLoader

  Sample SAM Template for GraphLoader

Parameters:
  NeptuneLoadFromS3IAMRoleArn:
    Type: String

  NeptuneLoaderEndpoint:
    Type: String

  NeptuneSubnet:
    Type: String

  NeptuneSecurityGroup:
    Type: String

  LoggingBucketName:
    Type: String

  VPC:
    Type: String

  PrivateSubnet1:
    Type: String

  PrivateSubnet2:
    Type: String

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
  Api:
    TracingEnabled: True

Resources:

  GraphLoadStateMachine:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/video_processing.asl.json
      DefinitionSubstitutions:
        GraphLoadFunctionArn: !GetAtt GraphLoadFunction.Arn
        CheckGraphLoadStatusFunctionArn: !GetAtt CheckGraphLoadStatusFunction.Arn
      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref GraphLoadFunction
        - LambdaInvokePolicy:
            FunctionName: !Ref CheckGraphLoadStatusFunction

  GraphLoadSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the graph load function
      GroupName: GraphLoadSecurityGroup
      #      SecurityGroupEgress:
      #        - Egress
      #      SecurityGroupIngress:
      #        - Ingress
      VpcId: !Ref VPC

  GraphLoadStateMachineTrigger:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/graph_load_state_machine_trigger
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 15
      ReservedConcurrentExecutions: 1
      DeadLetterQueue:
        TargetArn: !GetAtt GraphLoadTriggerDeadLetterLoadQueue.Arn
        Type: SQS
      Architectures:
        - x86_64
      Events:
        GraphLoadEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt GraphLoadQueue.Arn
            BatchSize: 10
      Environment:
        Variables:
          GRAPH_LOAD_STATE_MACHINE_ARN: !Ref GraphLoadStateMachine
      Policies:
        - AWSStepFunctionsFullAccess
        - AmazonSQSFullAccess
        - AWSLambdaBasicExecutionRole
      VpcConfig:
        SecurityGroupIds:
          - !Ref GraphLoadSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  GraphLoadStagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucketName
        LogFilePrefix: GraphETL/Video/GraphLoad

  GraphLoadQueue:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true

  GraphLoadTriggerDeadLetterLoadQueue:
    Type: AWS::SQS::Queue
    Properties:
      SqsManagedSseEnabled: true

#  LoadToGraphDeadLetterQueue:
#    Type: AWS::SQS::Queue
#    Properties:
#      SqsManagedSseEnabled: true

  GraphLoadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/load_to_graph/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      ReservedConcurrentExecutions: 1
#      DeadLetterQueue:
#        TargetArn: !GetAtt LoadToGraphDeadLetterQueue.Arn
#        Type: SQS
      Architectures:
        - x86_64
      Environment:
        Variables:
          NEPTUNE_LOADER_ENDPOINT: !Ref NeptuneLoaderEndpoint
          NEPTUNE_LOAD_ROLE_ARN: !Ref NeptuneLoadFromS3IAMRoleArn
          GRAPH_LOAD_STAGING_BUCKET: !Ref GraphLoadStagingBucket
      VpcConfig:
        SecurityGroupIds:
          - !Ref NeptuneSecurityGroup
        SubnetIds:
          - !Ref NeptuneSubnet
      Policies:
        - AmazonS3FullAccess
#        - AmazonSQSFullAccess

  CheckGraphLoadStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/check_load_status/
      Handler: app.lambda_handler
      Runtime: python3.9
      Timeout: 60
      ReservedConcurrentExecutions: 1
#      DeadLetterQueue:
#        TargetArn: !GetAtt LoadToGraphDeadLetterQueue.Arn
#        Type: SQS
      Architectures:
        - x86_64
      Environment:
        Variables:
          NEPTUNE_LOADER_ENDPOINT: !Ref NeptuneLoaderEndpoint
          NEPTUNE_LOAD_ROLE_ARN: !Ref NeptuneLoadFromS3IAMRoleArn
      VpcConfig:
        SecurityGroupIds:
          - !Ref NeptuneSecurityGroup
        SubnetIds:
          - !Ref NeptuneSubnet
#      Policies:
#        - AmazonS3FullAccess

Outputs:
  GraphLoadStagingBucket:
    Description: "Bucket for staging graph load files"
    Value: !Ref GraphLoadStagingBucket
  GraphLoadQueue:
    Description: "Bucket for staging graph load files"
    Value: !GetAtt GraphLoadQueue.QueueName

