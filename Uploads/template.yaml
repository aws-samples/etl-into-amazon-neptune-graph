AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  UploadsStack

  Sample SAM Template for UploadsStack

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  VideoProcessingStateMachineArn:
    Type: String

Resources:

  IngestLoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: "LogDeliveryWrite"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  IngestLoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref IngestLoggingBucket
      PolicyDocument:
        Statement:
          - Effect: "Deny"
            Action: "s3:*"
            Principal: "*"
            Resource:
              - !Sub "${IngestLoggingBucket.Arn}/*"
              - !GetAtt IngestLoggingBucket.Arn
            Condition:
              Bool:
                aws:SecureTransport: false

  IngestBucket:
    Type: AWS::S3::Bucket
    Properties:
      LoggingConfiguration:
        DestinationBucketName:
          !Ref IngestLoggingBucket
        LogFilePrefix: "ingest-logs"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      BucketName: !Sub "video-ingest-${AWS::AccountId}-${AWS::Region}"
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt NewUploadQueue.Arn
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      VersioningConfiguration:
        Status: Enabled

  QueuePolicy:
    Type: 'AWS::SQS::QueuePolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: "s3.amazonaws.com"
            Action:
              - 'SQS:SendMessage'
            Resource: !GetAtt NewUploadQueue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Join [ "",[ 'arn:aws:s3:::', !Sub "video-ingest-${AWS::AccountId}-${AWS::Region}" ] ]
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Queues:
        - !Ref NewUploadQueue

  NewUploadQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref UploadsMasterKmsKey
      QueueName: !Sub "new-upload-${AWS::AccountId}-${AWS::Region}"

  UploadsDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref UploadsMasterKmsKey
      QueueName: !Sub "uploads-dead-letter-queue-${AWS::AccountId}-${AWS::Region}"

  UploadsMasterKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
      KeySpec: SYMMETRIC_DEFAULT
      KeyUsage: ENCRYPT_DECRYPT

  NewUploadHandler:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: upload_handler/
      Handler: app.lambda_handler
      Runtime: python3.9
      KmsKeyArn: !GetAtt UploadsMasterKmsKey.Arn
      ReservedConcurrentExecutions: 1
      DeadLetterQueue:
        TargetArn: !GetAtt UploadsDeadLetterQueue.Arn
        Type: SQS
      Architectures:
        - x86_64
      Events:
        NewVideoUpload:
          Type: SQS
          Properties:
            Queue: !GetAtt NewUploadQueue.Arn
      Environment:
        Variables:
          VIDEO_PROCESSING_STEP_FUNCTION_ARN: !Ref VideoProcessingStateMachineArn
      Policies:
#        - AmazonS3FullAccess
#        - AmazonRekognitionFullAccess
        - AWSStepFunctionsFullAccess

#Outputs:
#  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#  # Find out more about other implicit resources you can reference within SAM
#  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#  HelloWorldApi:
#    Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#  HelloWorldFunction:
#    Description: "Hello World Lambda Function ARN"
#    Value: !GetAtt HelloWorldFunction.Arn
#  HelloWorldFunctionIamRole:
#    Description: "Implicit IAM Role created for Hello World function"
#    Value: !GetAtt HelloWorldFunctionRole.Arn
